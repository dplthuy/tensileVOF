/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2106                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pisoFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

vortexTime	1.1655;


timeToSteadyState #eval{25*$vortexTime};

endTime         #eval{$timeToSteadyState+100*$vortexTime};

deltaT          0.001;

writeControl    runTime;

writeInterval   $vortexTime;

purgeWrite      0;

writeFormat     binary;

writePrecision  8;

writeCompression off;

timeFormat      general;

timePrecision   10;

runTimeModifiable yes;

libs ("libmyturbulenceModels");

functions
{
	vorticity
	{
	type	vorticity;
	libs	(fieldFunctionObjects);
	
	writeControl	writeTime;
	
	}
	velocityGradient
	{
	type	grad;
	libs	(fieldFunctionObjects);

	field	U;
	writeControl writeTime;
	}

    averageFields
    {
        type            fieldAverage;
        libs            (fieldFunctionObjects);
        writeControl    writeTime;
	
	timeStart	 $timeToSteadyState;	//After x vortex shedding cycles
	
        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }
            
	   grad(U)
	   {
		mean	   on;
		prime2Mean off;
                base	   time;
	   }

            vorticity
            {
            	mean	     on;
            	prime2Mean  off;
            	base	     time;
            }

        );
    }
    
    // Integrate force coefficients
    forceCoefficients
    {
        type            forceCoeffs;
        libs            (forces);
        writeControl    writeTime;
		
        patches
        (
            cylinder
        );
        
        magUInf      0.39;
        lRef	     0.1;
        Aref	     0.098696;
        rhoInf	     1.225;
        porosity    no;
        
        rho	     rhoInf;
        p	     p;
        U	     U;

        CofR        (0 0 0);
        dragDir     (1 0 0);
        liftDir     (0 1 0);
    }
    
    // Sample near-wall vorticity
    surfaceSampling
    {
        type            surfaces;
        libs            (sampling);
        writeControl    writeTime;
        
        timeStart	$timeToSteadyState;

        interpolationScheme cellPoint;

        surfaceFormat vtk;

        // Fields to be sampled
        fields
        (
            vorticityMean
	    grad(U)Mean
        );

        surfaces
        {
            cylinderWall
            {
                type            patchInternalField;
                patches         ( cylinder );
                distance        1E-5;
                interpolate     true;
                triangulate     false;
            }
        }
    }	
    
    // Sample velocity & velocity fluctuations
    velocityProfiles
    {
    	type		surfaces;
    	libs		(sampling);
    	writeControl	onEnd;
    	interpolationScheme	cellPoint;
    	surfaceFormat	raw;
    	
    	timeStart	$timeToSteadyState;
    	
    	fields
        (
            UMean
            UPrime2Mean
        );
    	
    	surfaces
    	(
    		centerLinePlane
    		{
    			type		plane;
    			planeType	pointAndNormal;
    			
    			pointAndNormalDict
    			{
    				point	(1 0.5 0.15708);
    				normal		(0 1 0);
    			}
    			
    			triangulate	false;
    		}
    		
    		xD106
    		{
    			type		plane;
    			planeType	pointAndNormal;
    			
    			pointAndNormalDict
    			{
    				point	(0.106 0.0 0.0);
    				normal	(1 0 0);
    			}

    			triangulate	false;
    		}
    		
    		xD154
    		{
    			type		plane;
    			planeType	pointAndNormal;
    			
    			pointAndNormalDict
    			{
    				point	(0.1545 0.0 0.0);
    				normal	(1 0 0);
    			}
    			
    			triangulate	false;
    		}
    		
    		xD202
    		{
    			type		plane;
    			planeType	pointAndNormal;
    			
    			pointAndNormalDict
    			{
    				point	(0.202 0.0 0.0);
    				normal	(1 0 0);
    			}

    			triangulate	false;
    		}
    		
    		xD400
    		{
    			type		plane;
    			planeType	pointAndNormal;
    			
    			pointAndNormalDict
    			{
    				point	(0.4 0.0 0.0);
    				normal	(1 0 0);
    			}

    			triangulate	false;
    		}
    		
    		xD700
    		{
    			type		plane;
    			planeType	pointAndNormal;
    			
    			pointAndNormalDict
    			{
    				point	(0.7 0.0 0.0);
    				normal	(1 0 0);
    			}

    			triangulate	false;
    		}
    		
    		xD1000
    		{
    			type		plane;
    			planeType	pointAndNormal;
    			
    			pointAndNormalDict
    			{
    				point	(1.0 0.0 0.0);
    				normal	(1 0 0);
    			}

    			triangulate	false;
    		}
    	);
    }
    
    energySpectrumSample
    {
    	type	sets;
    	libs	(sampling);
    	
    	writeControl    runTime;

	writeInterval   #eval{0.1*$vortexTime};
    	
    	timeStart	$timeToSteadyState;
    	
    	interpolationScheme	cellPoint;
    	setFormat	raw;
    	
    	fields
    	(
    	   UPrime2Mean
    	   U
    	);
    	
    	sets
    	(
   	
    	xD300
    	{
    		type	uniform;
    		axis	distance;
    		
    		start	(0.85 0.5 0);
    		end	(0.85 0.5 0.314159);
    		nPoints 32;
    	}
    	
    	xD500
    	{
    		type	uniform;
    		axis	distance;
    		
    		start	(1.05 0.5 0);
    		end	(1.05 0.5 0.314159);
    		nPoints 32;
    	}
    	
    	);
    }
}

// ************************************************************************* //
