/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  6                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//convertToMeters 1;
scale 0.05;

pi 3.141539;
zMin -$pi;
zMax $pi;


vertices
(
    //back up
    (1 0 $zMin)                  	//0
    (3 0 $zMin)                    	//1 
    (60 0 $zMin)                   	//2   
    (60 2.12132 $zMin)            	//3 
    (2.12132 2.12132 $zMin)      	//4
    (0.707107 0.707107 $zMin)      	//5
    (60 10 $zMin)                   	//6  
    (2.12132 10 $zMin)             	//7
    (0 10 $zMin)                    	//8 
    (0 3 $zMin)                    	//9
    (0 1 $zMin)                  	//10
    (-1 0 $zMin)                 	//11
    (-3 0 $zMin)                   	//12 
    (-20 0 $zMin)                   	//13
    (-20 2.12132 $zMin)            	//14
    (-2.12132 2.12132 $zMin)     	//15
    (-0.707107 0.707107 $zMin)     	//16
    (-20 10 $zMin)                   //17
    (-2.12132 10 $zMin)            	//18
    
    //front up
    (1 0 $zMax)                   	//19
    (3 0 $zMax)                     	//20
    (60 0 $zMax)                    	//21
    (60 2.12132 $zMax)             	//22
    (2.12132 2.12132 $zMax)       	//23
    (0.707107 0.707107 $zMax)       	//24
    (60 10 $zMax)                    	//25
    (2.12132 10 $zMax)              	//26
    (0 10 $zMax)                     	//27
    (0 3 $zMax)                     	//28 
    (0 1 $zMax)                   	//29  
    (-1 0 $zMax)                  	//30
    (-3 0 $zMax)                    	//31  
    (-20 0 $zMax)                    	//32
    (-20 2.12132 $zMax)             	//33  
    (-2.12132 2.12132 $zMax)      	//34  
    (-0.707107 0.707107 $zMax)      	//35 
    (-20 10 $zMax)                    //36
    (-2.12132 10 $zMax)             	//37  
    
    //back down
    (60 -2.12132 $zMin)            	//38
    (2.12132 -2.12132 $zMin)      	//39
    (0.707107 -0.707107 $zMin)      	//40
    (60 -10 $zMin)                   //41 
    (2.12132 -10 $zMin)             	//42
    (0 -10 $zMin)                    //43
    (0 -3 $zMin)                    	//44
    (0 -1 $zMin)                  	//45
    (-20 -2.12132 $zMin)            	//46
    (-2.12132 -2.12132 $zMin)     	//47
    (-0.707107 -0.707107 $zMin)     	//48
    (-20 -10 $zMin)                  //49
    (-2.12132 -10 $zMin)            	//50
    
    //front down
    (60 -2.12132 $zMax)             	//51
    (2.12132 -2.12132 $zMax)       	//52
    (0.707107 -0.707107 $zMax)       	//53
    (60 -10 $zMax)                    //54 
    (2.12132 -10 $zMax)              	//55
    (0 -10 $zMax)                     //56
    (0 -3 $zMax)                     	//57
    (0 -1 $zMax)                   	//58
    (-20 -2.12132 $zMax)             	//59
    (-2.12132 -2.12132 $zMax)      	//60
    (-0.707107 -0.707107 $zMax)      	//61
    (-20 -10 $zMax)                   //62
    (-2.12132 -10 $zMax)             	//63
   
);

blocks
(
    //up
    hex (5 4 9 10 24 23 28 29) (80 30 32) simpleGrading (2 1 1)       	//0
    hex (0 1 4 5 19 20 23 24) (80 30 32) simpleGrading (2 1 1)         	//1
    hex (1 2 3 4 20 21 22 23) (350 30 32) simpleGrading (6.5 1 1)         	//2
    hex (4 3 6 7 23 22 25 26) (350 70 32) simpleGrading (6.5 6 1)         	//3 
    hex (9 4 7 8 28 23 26 27) (30 70 32) simpleGrading (1 6 1)         	//4
    hex (15 16 10 9 34 35 29 28) (80 30 32) simpleGrading (0.5 1 1)    	//5
    hex (12 11 16 15 31 30 35 34) (80 30 32) simpleGrading (0.5 1 1)   	//6
    hex (13 12 15 14 32 31 34 33) (70 30 32) simpleGrading (0.15 1 1)   	//7
    hex (14 15 18 17 33 34 37 36) (70 70 32) simpleGrading (0.15 6 1)   	//8
    hex (15 9 8 18 34 28 27 37) (30 70 32) simpleGrading (1 6 1)       	//9
    
    //down
    hex (40 45 44 39 53 58 57 52) (30 80 32) simpleGrading (1 2 1)      	//10 
    hex (0 40 39 1 19 53 52 20) (30 80 32) simpleGrading (1 2 1)         //11  
    hex (1 39 38 2 20 52 51 21) (30 350 32) simpleGrading (1 6.5 1)        	//12 
    hex (39 42 41 38 52 55 54 51) (70 350 32) simpleGrading (6 6.5 1)      	//13   
    hex (44 43 42 39 57 56 55 52) (70 30 32) simpleGrading (6 1 1)       //14 
    hex (47 44 45 48 60 57 58 61) (30 80 32) simpleGrading (1 0.5 1)     //15 
    hex (12 47 48 11 31 60 61 30) (30 80 32) simpleGrading (1 0.5 1)     //16 
    hex (13 46 47 12 32 59 60 31) (30 70 32) simpleGrading (1 0.15 1)  	//17  
    hex (46 49 50 47 59 62 63 60) (70 70 32) simpleGrading (6 0.15 1)  	//18  
    hex (47 50 43 44 60 63 56 57) (70 30 32) simpleGrading (6 1 1)       //19   
);

edges
(
    //up
    arc 0 5 (0.939693 0.34202 $zMin)
    arc 5 10 (0.34202 0.939693 $zMin)
    arc 19 24 (0.939693 0.34202 $zMax)
    arc 24 29 (0.34202 0.939693 $zMax)
    arc 11 16 (-0.939693 0.34202 $zMin)
    arc 16 10 (-0.34202 0.939693 $zMin)
    arc 30 35 (-0.939693 0.34202 $zMax)
    arc 35 29 (-0.34202 0.939693 $zMax)

    arc 15 9 (-0.1 3 $zMin)
    arc 12 15 (-3 0.1 $zMin)
    arc 1 4 (3 0.1 $zMin)
    arc 4 9 (0.1 3 $zMin)
    arc 34 28 (-0.1 3 $zMax)
    arc 23 28 (0.1 3 $zMax)
    arc 20 23 (3 0.1 $zMax)
    arc 31 34 (-3 0.1 $zMax)

    //down
    arc 0 40 (0.939693 -0.34202 $zMin)
    arc 40 45 (0.34202 -0.939693 $zMin)
    arc 19 53 (0.939693 -0.34202 $zMax)
    arc 53 58 (0.34202 -0.939693 $zMax)
    arc 11 48 (-0.939693 -0.34202 $zMin)
    arc 48 45 (-0.34202 -0.939693 $zMin)
    arc 30 61 (-0.939693 -0.34202 $zMax)
    arc 61 58 (-0.34202 -0.939693 $zMax)

    arc 1 39  (3 -0.1 $zMin)
    arc 39 44 (0.1 -3 $zMin)
    arc 20 52 (3 -0.1 $zMax)
    arc 52 57 (0.1 -3 $zMax) 
    arc 47 44 (-0.1 -3 $zMin)
    arc 12 47 (-3 -0.1 $zMin)
    arc 31 60 (-3 -0.1 $zMax)
    arc 60 57 (-0.1 -3 $zMax)  
);

boundary
(
    
    out
    {
		type patch;
		faces
		(
		    //up
		    (2 3 22 21)
		    (3 6 25 22)
		    
		    //down
		    (38 2 21 51) 
		    (41 38 51 54) 
		);
    }

    sym1
    {
		type symmetryPlane;
		faces
		(
		    (7 8 27 26)
		    (6 7 26 25)
		    (8 18 37 27)
		    (18 17 36 37)
		);
    }
      
    sym2
    {
		type symmetryPlane;
		faces
		(
		    (43 42 55 56) 
		    (42 41 54 55) 
		    (50 43 56 63) 
		    (49 50 63 62) 
		);
    }

    in
    {
		type patch;
		faces
		(
		    //up
		    (14 13 32 33)
		    (17 14 33 36)
		    
		    //down
		    (13 46 59 32) 
		    (46 49 62 59) 
    	);
    }

    cylinder
    {
		type wall;
		faces
		(
		    //up
		    (10 5 24 29)
		    (5 0 19 24)
		    (16 10 29 35)
		    (11 16 35 30)
		    
		    //down
		    (40 45 58 53) 
		    (0 40 53 19)  
		    (45 48 61 58) 
		    (48 11 30 61) 
    	);
    }

	back 
    {
		type symmetryPlane;
		faces
		(
			//up
		    (5 10 9 4)
		    (0 5 4 1)
		    (1 4 3 2)
		    (4 7 6 3)
		    (9 8 7 4)
		    (16 15 9 10)
		    (11 12 15 16)
		    (12 13 14 15)
		    (14 17 18 15)
		    (15 18 8 9)

		    //down
		    (45 40 39 44)
		    (40 0 1 39)
		    (1 2 38 39)
		    (39 38 41 42)
		    (44 39 42 43)
		    (48 45 44 47)
		    (11 48 47 12)
		    (13 12 47 46)
		    (46 47 50 49)
		    (47 44 43 50)
    	);
    }

	front
    {
		type symmetryPlane;
		faces
		(
			//up
		    (24 23 28 29)
		    (20 23 24 19)
		    (21 22 23 20)
		    (22 25 26 23)
		    (26 27 28 23)
		    (28 34 35 29)
		    (34 31 30 35)
		    (33 32 31 34)
		    (36 33 34 37)
		    (37 34 28 27)
	 
		    //down
		    (53 58 57 52)
		    (19 53 52 20)
		    (21 20 52 51)
		    (51 52 55 54)
		    (52 57 56 55)
		    (58 61 60 57)
		    (61 30 31 60)
		    (31 32 59 60)
		    (60 59 62 63)
		    (57 60 63 56)
    	);
    }
     
);

mergePatchPairs
(
);

// ************************************************************************* //
